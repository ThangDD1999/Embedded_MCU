/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */


#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

#include <stdint.h>

/*!< Peripheral memory map */
/*!< Peripheral base address in the alias region */
#define PERIPH_BASE 	0x40000000UL
#define APB1PERIPH_BASE PERIPH_BASE
#define APB2PERIPH_BASE (PERIPH_BASE + 0x10000UL)
#define AHBPERIPH_BASE 	(PERIPH_BASE + 0x18000UL)

/*!< APB2 peripherals */
#define GPIOA_BASE		(APB2PERIPH_BASE + 0x0800UL)
#define GPIOB_BASE		(APB2PERIPH_BASE + 0x0C00UL)
#define GPIOC_BASE		(APB2PERIPH_BASE + 0x1000UL)
#define GPIOD_BASE		(APB2PERIPH_BASE + 0x1400UL)
#define GPIOE_BASE		(APB2PERIPH_BASE + 0x1800UL)
#define GPIOF_BASE		(APB2PERIPH_BASE + 0x1C00UL)
#define GPIOG_BASE		(APB2PERIPH_BASE + 0x2000UL)

/*!< AHB peripherals */
#define RCC_BASE 		(AHBPERIPH_BASE + 0x9000UL)

/* Clock register offset */
typedef struct
{
	volatile uint32_t CR;
	uint32_t RV1[4];
	volatile uint32_t AHBENR;
	volatile uint32_t APB2ENR;
	volatile uint32_t APB1ENR;
	uint32_t RV2[2];
} RCC_OFF;

#define RCC ((RCC_OFF *) RCC_BASE)

/* GPIO */
typedef struct
{
	volatile uint32_t CRL;
	volatile uint32_t CRH;
	volatile uint32_t IDR;
	volatile uint32_t ODR;
	volatile uint32_t BSRR;
	volatile uint32_t BRR;
	volatile uint32_t LCKR;
} GPIO_OFF;

#define GPIOC ((GPIO_OFF *) GPIOC_BASE)

void Clock_Init(void)
{
	/* HSI ON */
	RCC->CR |= (1 << 0);
	/* Clock for GPIOC */
	RCC->APB2ENR |= (1<<4);
}

void myDelay(uint32_t time)
{
	uint32_t i;
	while(time--)
	{
		for(i=0;i<1000;i++);
	}
}

void GPIO_Init(void)
{
	/* Reset port C pin 13 */
	GPIOC->CRH &= 0xFF0FFFFF;
	/* 11: output mode, max speed 50hz */
	GPIOC->CRH |= (1 << 23)|(1 << 22);
}

int main(void)
{
	Clock_Init();
	GPIO_Init();
	while(1)
	{
		GPIOC->ODR |= (1 << 13);
		myDelay(100);
		GPIOC->ODR &= ~(1 << 13);
		myDelay(100);
	}
	return 0;
}
